section.feature
  .feature_inner
    .feature_info
      header.feature_header
        img.feature_logo( alt="Autoprefixer" src="./features/autoprefixer.svg" )
        h2.feature_title Increase code readability
      p.feature_body
        | Add vendor prefixes to CSS rules using values from Can I Use. #[a.feature_tool( href="https://github.com/postcss/autoprefixer" ) Autoprefixer] will use the data based on current browser popularity and property support to apply prefixes for you.
    .feature_example
      figure.example
        pre.code
          :lowlight( lang="css" prefix="code_" )
            :fullscreen {
            }
        figcaption.example_caption CSS input
      figure.example.is-out
        pre.code
          :lowlight( lang="css" prefix="code_" )
            :-webkit-full-screen {
            }
            :-ms-fullscreen {
            }
            :fullscreen {
            }
        figcaption.example_caption CSS output

section.feature.is-alt
  .feature_inner
    .feature_info
      header.feature_header
        img.feature_logo( alt="postcss-preset-env" src="./features/cssdb.svg" )
        h2.feature_title Use tomorrow’s CSS today!
      p.feature_body
        | #[a.feature_tool( href="https://preset-env.cssdb.org/" ) PostCSS Preset Env], lets you convert modern CSS into something most browsers can understand, determining the polyfills you need based on your targeted browsers or runtime environments, using #[a.feature_tool( href="https://cssdb.org/" ) cssdb].
    .feature_example
      figure.example
        pre.code
          :lowlight( lang="css" prefix="code_" )
            body {
              color: lch(53 105 40);
            }
        figcaption.example_caption CSS input
      figure.example.is-out
        pre.code
          :lowlight( lang="css" prefix="code_" )
            body {
              color: rgb(250, 0, 4);
            }
        figcaption.example_caption CSS output

section.feature
  .feature_inner
    .feature_info
      header.feature_header
        img.feature_logo( alt="CSS Modules" src="./features/css-modules.svg" )
        h2.feature_title The end of global CSS
      p.feature_body
        | #[a.feature_tool( href="https://github.com/css-modules/css-modules" ) CSS Modules] means you never need to worry about your names being too generic, just use whatever makes the most sense.
    .feature_example
      figure.example
        pre.code
          :lowlight( lang="css" prefix="code_" )
            .name {
              color: gray;
            }
        figcaption.example_caption CSS input
      figure.example.is-out
        pre.code
          :lowlight( lang="css" prefix="code_" )
            .Logo__name__SVK0g {
              color: gray;
            }
        figcaption.example_caption CSS output

section.feature.is-alt
  .feature_inner
    .feature_info
      header.feature_header
        img.feature_logo( alt="stylelint" src="./features/stylelint.svg" )
        h2.feature_title Avoid errors in your CSS
      p.feature_body
        | Enforce consistent conventions and avoid errors in your stylesheets with #[a.feature_tool( href="https://stylelint.io/" ) stylelint], a modern CSS linter. It supports the latest CSS syntax, as well as CSS-like syntaxes, such as SCSS.
    .feature_example
      figure.example
        pre.code
          :lowlight( lang="css" prefix="code_" )
            a {
              color: #d3;
            }
        figcaption.example_caption CSS input
      figure.example.is-out
        pre.code
          :lowlight( prefix="code_" )
            app.css
            2:10 Invalid hex color
        figcaption.example_caption Console output
